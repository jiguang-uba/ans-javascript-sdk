define(function () { 'use strict';

  var $lib = 'JS';
  var $lib_version = '5.0.0';
  var $ans = 'JS';
  var globalWindow = window;
  // sdk配置参数默认值
  function optionsDefault() {
      return {
          appkey: '',
          uploadURL: '',
          debugMode: 0,
          visitorConfigURL: '',
          name: '',
          auto: true,
          SDKFileDirectory: '',
          autoTrack: false,
          autoClickBlackList: '',
          userClickProperty: {},
          trackList: [],
          autoHeatmap: false,
          autoWebstay: true,
          webstayDuration: 18000000,
          autoProfile: true,
          hash: true,
          encryptType: 0,
          allowTimeCheck: false,
          maxDiffTimeInterval: 30,
          autoPageViewDuration: false,
          sendDataTimeout: 10000,
          getDataTimeout: 10000,
          sendType: 'img',
          crossSubdomain: false
      };
  }

  var typeMap = {};
  var typeArr = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Object', 'Error', 'HTMLCollection'];
  typeArr.map(function (item) {
      typeMap["[object " + item + "]"] = item.toLowerCase();
  });
  function type(value) {
      var typeName = typeof value;
      if (typeName === 'object') {
          return typeMap[Object.prototype.toString.call(value)];
      }
      return typeName;
  }
  function isNumber(value) {
      return type(value) === 'number';
  }
  function isString(value) {
      return type(value) === 'string';
  }
  function isArray(value) {
      return Array.isArray(value);
  }
  function isBoolean(value) {
      return type(value) === 'boolean';
  }
  function isObject(value) {
      return type(value) === 'object';
  }
  function isFunction(value) {
      return type(value) === 'function';
  }

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }

  // 只读属性，无法被更改
  var readOnlyAttrs = ['$lib', '$lib_version', '$platform', '$first_visit_time', '$debug', '$is_login'];
  // 通用属性，大部分事件都会上报
  var commonAttrs = ['$screen_width', '$screen_height', '$language', '$time_zone', '$session_id', '$is_time_calibrated', '$web_crawler', '$user_agent', '$title', '$url', '$is_first_day'];
  // 公共预制属性，任何事件上报都会带上这些属性
  var publicAttrs = __spreadArrays(['$lib', '$lib_version', '$platform', '$is_login', '$debug'], commonAttrs);
  // element相关属性
  var elementAttrs = ['$element_type', '$element_path', '$element_content', '$element_id', '$element_name', '$element_target_url', '$element_class_name', '$device_type', '$url_path'];
  // utm相关属性
  var utmAttrs = ['$utm_campaign_id', '$utm_campaign', '$utm_medium', '$utm_source', '$utm_content', '$utm_term'];
  // 预制事件列表与事件属性
  var events = {
      $startup: __spreadArrays(utmAttrs, ['$is_first_time' //首次访问，只在startUp
      ]),
      $end: ['$duration' //使用时长
      ],
      $pageview: __spreadArrays(utmAttrs, ['$referrer', '$referrer_domain', '$startup_time' // 此行下面5个只在 pageView 中有
      ]),
      page_close: ['$referrer', 'pagestaytime'],
      $alias: ['$original_id'],
      $getPresetProperties: ['$first_visit_time'],
      $user_click: elementAttrs,
      $web_click: __spreadArrays(elementAttrs, ['$page_width', '$page_height', '$click_x', '$click_y', '$element_x', '$element_y', '$element_clickable']),
      $webstay: ['$referrer', '$referrer_domain', '$viewport_width', '$viewport_position', '$viewport_height', '$event_duration', '$device_type'],
      $profile_set_once: ['$first_visit_time', '$first_visit_language']
  };

  var errorMessage = {
      'common': '',
      '60001': '{FN}:Property key invalid, support type: String \n' + 'current key:{KEY}\n' + 'current keyType:{KEYTYPE}',
      '60002': '{FN}:Property value invalid of key[{KEY}], support type: Number \n' + 'current value: {VALUE}\n' + 'current type: {VALUETYPE}',
      '60003': '{FN}:Property value invalid of key[{KEY}], support type: Boolean \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}',
      '60005': '{FN}:The length of the property[{KEY}] value (string[{VALUE}]) needs to be 1-255 !',
      '60006': 'Please set appkey first.',
      '60007': 'Please set uploadURL first.',
      '60008': 'Send message failed.',
      '60009': '{FN}:The length of the property key (string[{KEY}]) needs to be 1-125 !',
      '600010': '{FN}:The length of the property key (string[{KEY}]) needs to be 1-99 !',
      '600012': '{FN}:Property key invalid, nonsupport value: ' + readOnlyAttrs.join('/') + ' \n' + 'current KEY:{KEY}',
      '600016': '{FN}: Property value invalid, support type: Object \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}',
      '600020': 'DebugMode only can be 0,1,2',
      '600022': '{FN}: 属性[{KEY}]的值[{VALUE}]无效，支持类型：String/Number/Boolean/string[]，若为字符串，长度范围1-255字符',
      '600023': '{FN}: 属性key的名称[{KEY}]无效，属性key是以字母开头的字符串，由字母、数字、下划线组成，字母不区分大小写，不支持乱码、中文、空格等，长度范围1-99字符；',
      '600025': '{FN}: 事件名称[{VALUE}]无效，事件ID必须字母或者$开头，可包含数字字母与下划线，1-99个字符；'
  };
  var successMessage = {
      'common': '',
      '20001': 'Send message success',
      '20002': '{FN}: set success ({VALUE})',
      '20003': '{FN}:({VALUE}) delete success',
      '20004': '{FN}:clear success',
      '20005': '{FN}:reset success',
      '20006': 'set appkey success. current appkey : {VALUE}',
      '20007': 'Init Analysysdata ' + $lib + ' sdk success, version : ' + $lib_version + '',
      '20008': 'set uploadURL success. current uploadURL : {VALUE}',
      '20009': '{FN}:[{KEY}] : get failed',
      '20010': '{FN}:[{KEY}] : get success. ({VALUE})',
      '20011': '{FN}:({VALUE}) delete failed',
      '20012': 'Send Message to Server: {KEY} \n' + 'data:{VALUE}',
      '20013': "收到服务器的时间: {VALUE} \n" + "本地时间: {KEY} \n" + "时间相差:  {FN} \n" + "数据将会进行时间校准",
      '20014': 'aliasID already bound'
  };
  function successLog(opt) {
      if (config.debugMode === 1 || config.debugMode === 2) {
          var msgTemp = successMessage[opt.code] || successMessage.common;
          var showMsg = msgTemp.replace(/{FN}/, opt.fn).replace(/{KEY}/g, opt.key || '').replace(/{VALUE}/g, JSON.stringify(opt.value));
          console.log(showMsg);
      }
  }
  function errorLog(opt, isInit) {
      var msgTemp = errorMessage[opt.code] || errorMessage.common;
      var showMsg = msgTemp.replace(/{FN}/g, opt.fn || '').replace(/{KEY}/g, JSON.stringify(opt.key || '')).replace(/{VALUE}/g, JSON.stringify(opt.value)).replace(/{VALUETYPE}/g, type(opt.value)).replace(/{KEYTYPE}/g, type(opt.key));
      if (config.debugMode === 1 || config.debugMode === 2 || isInit) {
          console.warn(showMsg);
      }
  }

  /**
   * 长度校验
   * @param value
   * @param max
   * @param min
   * @returns
   */
  function lengthCheck(value, max, min) {
      if (max === void 0) {
          max = 255;
      }
      if (min === void 0) {
          min = 1;
      }
      if (!isString(value)) {
          return false;
      }
      var len = value.length;
      return len < max && len >= min;
  }
  /**
   * 自定义属性key校验
   * @param value
   * @param eventName
   * @returns
   */
  function attrNameCheck(value, logObj) {
      var state = true;
      if (!lengthCheck(value, 99)) {
          state = false;
      } else if (readOnlyAttrs.indexOf(value) > -1) {
          state = false;
          if (logObj) {
              logObj.code = 600012;
          }
      } else {
          state = /^[$a-zA-Z][a-zA-Z0-9_$]{0,}$/.test(value);
      }
      if (logObj && logObj.fn && !state) {
          errorLog(logObj);
      }
      return state;
  }
  /**
   * 自定义属性值校验
   * @param value
   */
  function attrValueCheck(value, logObj) {
      var state = false;
      if (isString(value) || isNumber(value) || isArray(value) || isBoolean(value)) {
          state = true;
          if (isString(value)) {
              if (!lengthCheck(value, 255)) {
                  state = false;
              }
          } else if (isArray(value)) {
              var some = value.some(function (o) {
                  return lengthCheck(o, 255);
              });
              state = some;
          }
      }
      if (logObj && logObj.fn && logObj.key && !state) {
          errorLog(logObj);
      }
      return state;
  }
  /**
   * 属性校验，不通过的提示并删除
   * @param value
   * @param eventName 事件名称, 如果存在则抛出错误提示
   */
  function attrCheck(value, eventName) {
      var arrs = {};
      if (!isObject(value)) {
          errorLog({
              code: 600016,
              fn: eventName,
              value: value
          });
          return {};
      }
      for (var key in value) {
          var item = isFunction(value[key]) ? value[key]() : value[key];
          if (attrNameCheck(key, { code: 600023, fn: eventName, key: key }) && attrValueCheck(item, { code: 600022, fn: eventName, key: key, value: item })) {
              arrs[key] = item;
          }
      }
      return arrs;
  }
  /**
   * 验证是否全埋点统计黑名单
   * @param autoClickBlackList 全埋点统计黑名单
   * @param el
   * @returns boo
   */
  function autoClickBlackListCheck(autoClickBlackList, el) {
      if (autoClickBlackList) {
          var location = window.location;
          if (isString(autoClickBlackList)) {
              var url = location.href,
                  urlHost = location.protocol + '//' + location.host,
                  urlPath = urlHost + location.pathname,
                  urlIndex = urlPath + 'index.html',
                  urlHash = urlPath + location.hash,
                  urlArray = [url, urlHost, urlIndex, urlPath, urlHash];
              if (urlArray.indexOf(autoClickBlackList) > -1) {
                  return true;
              }
          } else if (isFunction(autoClickBlackList)) {
              return autoClickBlackList(el);
          } else if (isArray(autoClickBlackList)) {
              for (var i = 0; i < autoClickBlackList.length; i++) {
                  if (autoClickBlackListCheck(autoClickBlackList[i], el) === true) {
                      return true;
                  }
              }
          }
      }
      return false;
  }
  function checkElementConfig(trackList, el) {
      if (!trackList || isArray(trackList) && trackList.length === 0 || isString(trackList) && trackList === '') {
          return false;
      }
      if (isString(trackList)) {
          var tagName = el.tagName.toLowerCase();
          var className = '.' + el.className.split(' ').join('.');
          var id = el.id ? '#' + el.id : '';
          if (tagName === trackList.toLowerCase() || className === trackList || id === trackList || tagName + className === trackList || tagName + id === trackList || id + className === trackList || tagName + id + className === trackList) {
              return true;
          }
      } else if (isArray(trackList)) {
          for (var i = 0; i < trackList.length; i++) {
              if (checkElementConfig(trackList[i], el)) {
                  return true;
              }
          }
      } else if (isFunction(trackList)) {
          return trackList.call(trackList, el) || false;
      } else if (isObject(trackList) && trackList === el) {
          return true;
      }
      return false;
  }
  /**
   * 判断当前元素是否为可触控元素
   */
  function elementClickableCheck(el) {
      var trackList = config.trackList;
      var tagName = el.tagName.toLowerCase();
      var clickableElementList = ['a', 'button', 'input', 'select', 'textarea', 'svg']; // option无法触发点击事件
      function getElementAttrClick() {
          return el.getAttribute('data-ark-click') !== null;
      }
      var parent = el.parentNode;
      if (parent && parent.tagName && clickableElementList.indexOf(tagName) === -1) {
          while (parent) {
              if (parent.tagName) {
                  var parentTagName = parent.tagName.toLowerCase();
                  if (['button', 'select', 'body'].indexOf(parentTagName) > -1) {
                      tagName = parentTagName;
                      break;
                  }
                  parent = parent.parentNode;
              } else {
                  break;
              }
          }
      }
      if (clickableElementList.indexOf(tagName) > -1 || getElementAttrClick() || checkElementConfig(trackList, el)) {
          if (tagName === 'svg' && el.children && el.children.length > 0) {
              var svgIsClickable = false;
              var svgChildren = el.children;
              for (var i = 0; i < svgChildren.length; i++) {
                  if (svgChildren[i].tagName.toLowerCase() === 'use' && (svgChildren[i].getAttribute('xlink:href') || getElementAttrClick() || checkElementConfig(trackList, el))) {
                      svgIsClickable = true;
                  }
              }
              return svgIsClickable;
          }
          return true;
      }
      return false;
  }

  //base64加密 解密
  /* //1.加密
  let result = Base.encode('125中文');  //--> "MTI15Lit5paH"
    
  //2.解密
  let result2 = Base.decode(result); //--> '125中文'
  */
  var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  //public method for encoding
  var encode = function (input) {
      var output = "",
          chr1,
          chr2,
          chr3,
          enc1,
          enc2,
          enc3,
          enc4,
          i = 0;
      input = _utf8_encode(input);
      while (i < input.length) {
          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);
          enc1 = chr1 >> 2;
          enc2 = (chr1 & 3) << 4 | chr2 >> 4;
          enc3 = (chr2 & 15) << 2 | chr3 >> 6;
          enc4 = chr3 & 63;
          if (isNaN(chr2)) {
              enc3 = enc4 = 64;
          } else if (isNaN(chr3)) {
              enc4 = 64;
          }
          output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
      }
      return output;
  };
  // public method for decoding
  var decode = function (input) {
      var output = "",
          chr1,
          chr2,
          chr3,
          enc1,
          enc2,
          enc3,
          enc4,
          i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      while (i < input.length) {
          enc1 = _keyStr.indexOf(input.charAt(i++));
          enc2 = _keyStr.indexOf(input.charAt(i++));
          enc3 = _keyStr.indexOf(input.charAt(i++));
          enc4 = _keyStr.indexOf(input.charAt(i++));
          chr1 = enc1 << 2 | enc2 >> 4;
          chr2 = (enc2 & 15) << 4 | enc3 >> 2;
          chr3 = (enc3 & 3) << 6 | enc4;
          output = output + String.fromCharCode(chr1);
          if (enc3 != 64) {
              output = output + String.fromCharCode(chr2);
          }
          if (enc4 != 64) {
              output = output + String.fromCharCode(chr3);
          }
      }
      output = _utf8_decode(output);
      return output;
  };
  // private method for UTF-8 encoding
  var _utf8_encode = function (string) {
      string = string.replace(/\r\n/g, "\n");
      var utftext = "";
      for (var n = 0; n < string.length; n++) {
          var c = string.charCodeAt(n);
          if (c < 128) {
              utftext += String.fromCharCode(c);
          } else if (c > 127 && c < 2048) {
              utftext += String.fromCharCode(c >> 6 | 192);
              utftext += String.fromCharCode(c & 63 | 128);
          } else {
              utftext += String.fromCharCode(c >> 12 | 224);
              utftext += String.fromCharCode(c >> 6 & 63 | 128);
              utftext += String.fromCharCode(c & 63 | 128);
          }
      }
      return utftext;
  };
  // private method for UTF-8 decoding
  var _utf8_decode = function (utftext) {
      var string = "",
          i = 0,
          c = 0,
          c2 = 0,
          c3 = 0;
      while (i < utftext.length) {
          c = utftext.charCodeAt(i);
          if (c < 128) {
              string += String.fromCharCode(c);
              i++;
          } else if (c > 191 && c < 224) {
              c2 = utftext.charCodeAt(i + 1);
              string += String.fromCharCode((c & 31) << 6 | c2 & 63);
              i += 2;
          } else {
              c2 = utftext.charCodeAt(i + 1);
              c3 = utftext.charCodeAt(i + 2);
              string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
              i += 3;
          }
      }
      return string;
  };

  var document$1 = window.document;
  /**
   * Cookie setter & setter
   *
   * @param {String} name The identify name of cookie.
   * @param {String} value (Optional) String to set cookie value. (`null` to remove cookie)
   * @param {Object} options (Optional) Set the cooke native options, (path domain, secure, expires)
   */
  function cookie (name, value, options) {
      options = options || {};
      if (value !== undefined) {
          // set cookie
          if (value === null) {
              value = '';
              options.expires = -1;
          }
          if (typeof options.expires === 'number') {
              var days = options.expires,
                  t = options.expires = new Date();
              t.setTime(t.getTime() + days * 864e+5); // 24 * 60 * 60 * 1000
          }
          var encode = function (s) {
              try {
                  return options.raw ? s : encodeURIComponent(s);
              } catch (e) {}
              return s;
          };
          return document$1.cookie = [encode(name), '=', encode(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
      } else {
          var value_1 = null,
              cookie = document$1.cookie,
              decode = function (s) {
              return options.raw ? s : decodeURIComponent(s);
          },
              cookies = cookie ? cookie.split('; ') : [];
          for (var i = -1, l = cookies.length, c = name.length + 1; ++i < l;) {
              cookie = cookies[i].trim();
              if (cookie.substring(0, c) === name + '=') {
                  value_1 = decode(cookie.substring(c));
                  break;
              }
          }
          return value_1;
      }
  }

  var storageKey = 'FZ_STROAGE';
  var getLocalStorage = function (key, isSession) {
      if (key === void 0) {
          key = storageKey;
      }
      try {
          var storage = isSession ? globalWindow.sessionStorage : globalWindow.localStorage;
          var data = storage.getItem(key);
          return data ? JSON.parse(decode(data)) : null;
      } catch (e) {}
  };
  var setLocalStorage = function (key, data, isSession) {
      if (key === void 0) {
          key = storageKey;
      }
      if (data === void 0) {
          data = getCore();
      }
      try {
          var storage = isSession ? globalWindow.sessionStorage : globalWindow.localStorage;
          storage.setItem(key, encode(JSON.stringify(data)));
      } catch (e) {}
  };
  var getCookie = function (key) {
      if (key === void 0) {
          key = storageKey;
      }
      var data = cookie(key);
      if (data) {
          try {
              return JSON.parse(decode(data));
          } catch (e) {
              return data;
          }
      }
      return null;
  };
  var setCookie = function (key, data, option) {
      if (key === void 0) {
          key = storageKey;
      }
      cookie(key, data !== null ? encode(JSON.stringify(data)) : null, option);
  };

  /**
   * 1.百度：Baiduspider  Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)
   * 百度图片 Baiduspider-image+(+http://www.baidu.com/search/spider.htm)
   * 百度PC Mozilla/5.0 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html
   * 百度移动端 Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)
   *
   * 2.谷歌：Googlebot   Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
   * Google图片 AdsBot-Google-Mobile (+http://www.google.com/mobile/adsbot.html) Mozilla (iPhone; U; CPU iPhone OS 3 0 like Mac OS X) AppleWebKit (KHTML, like Gecko) Mobile Safari
   * 3.360蜘蛛：360Spider 360搜索  Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0);
   * 360网站安全 360spider (http://webscan.360.cn)
   * 4.Bing爬虫: bingbot  Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)
   * 5.腾讯搜搜蜘蛛：Sosospider  Sosospider+(+http://help.soso.com/webspider.htm)
   * 搜搜图片 Sosoimagespider+(+http://help.soso.com/soso-image-spider.htm)
   * 6.雅虎蜘蛛：Yahoo!   雅虎英文 Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)
   * 雅虎中国 Mozilla/5.0 (compatible; Yahoo! Slurp China; http://misc.yahoo.com.cn/help.html)
   * 4.有道蜘蛛：YoudaoBot Mozilla/5.0 (compatible; YoudaoBot/1.0; http://www.youdao.com/help/webmaster/spider/; )
   * 8.搜狗蜘蛛：Sogou News Spider   Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)
   * Sogou Pic Spider/3.0(+http://www.sogou.com/docs/help/webmasters.htm#07)
   * 9.瑞典 Speedy Spider: Speedy Spider  Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) Speedy Spider (http://www.entireweb.com/about/search_tech/speedy_spider/)
   * 10.俄罗斯 yandex : YandexBot Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)
   * 11.MSN蜘蛛：msnbot/msnbot-media msnbot/1.1 (+http://search.msn.com/msnbot.htm)
   * 12.必应蜘蛛：bingbot/compatible Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)
   * 13.听云爬虫：networkbench Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv: 11.0;NetworkBench/8.0.1.309-5774440-2481662) like Gecko
   * 14.Alexa蜘蛛：ia_archiver ia_archiver/8.9 (Windows NT 3.1; en-US;)
   * 15.宜sou蜘蛛：EasouSpider Mozilla/5.0 (compatible; EasouSpider; +http://www.easou.com/search/spider.html)
   * 16.华为赛门铁克蜘蛛：HuaweiSymantecSpider  HuaweiSymantecSpider/1.0+DSE-support@huaweisymantec.com+(compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR ; http://www.huaweisymantec.com/cn/IRL/spider)
   * 17.七牛镜像蜘蛛：qiniu qiniu-imgstg-spider-1.0
   * 18.DNSPod监控：DNSPod  DNSPod-Monitor/2.0
   * 19.俄罗斯 LinkpadBot：LinkpadBot   Mozilla/5.0 (compatible; LinkpadBot/1.06; +http://www.linkpad.ru)
   * 20.英国 MJ12bot：MJ12bot   Mozilla/5.0 (compatible; MJ12bot/v1.4.0; http://www.majestic12.co.uk/bot.php?+)
   * 21.即刻蜘蛛：JikeSpider
   * 22.一淘网蜘蛛：EtaoSpider Mozilla/5.0 (compatible; EtaoSpider/1.0; EtaoSpider)
   * 23.人工智能爬虫：crawler Mozilla/5.0 (compatible; 008/0.83; http://www.80legs.com/webcrawler.html) Gecko/2008032620
   * 24.Scrapy爬虫： scrapy
   * 25.监控宝：jiankongbao Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; JianKongBao Monitor 1.1)
   * 26.OneAPM爬虫:OneAPM FFAgent Mozilla/5.0 (Windows NT 6.1; WOW64; rv:39.0: OneAPM FFAgent)Gecko/20100101 Firefox/39.0
   * 27.PhantomJS:PhantomJS Mozilla/5.0 (Unknown; Linux x86_64)AppleWebKit/538. 1 (KHTML,like Gecko)PhantomJS/2.1.1 Safari/538.1
   * 28. BingPreview: Mozilla / 5.0 + (Windows + NT + 6.1; + WOW64) + AppleWebKit / 534++(KHTML, +like + Gecko) + BingPreview / 1.0 b
   */
  function isSpider() {
      var userAgent = navigator.userAgent.toLowerCase();
      if (userAgent.match(/(bot|crawler|spider|scrapy|dnspod|ia_archiver|jiankongbao|slurp|transcoder|networkbench|oneapm|PhantomJS|BingPreview)/i)) {
          return true;
      }
      return false;
  }

  // 单页面模式下监听路径变化
  function pathChange(fn) {
      var pushState = window.history.pushState;
      var replaceState = window.history.replaceState;
      window.history.pushState = function () {
          var arg = arguments;
          pushState.apply(window.history, arg);
          setTimeout(function () {
              fn && fn(arg);
          });
      };
      window.history.replaceState = function (e) {
          var arg = arguments;
          replaceState.apply(window.history, arg);
          setTimeout(function () {
              fn && fn(arg);
          });
      };
      var state = pushState ? 'popstate' : 'hashchange';
      window.addEventListener(state, function () {
          var arg = arguments;
          setTimeout(function () {
              fn && fn(arg);
          });
      });
  }
  var getDomainFromUrl = function (domianStatus) {
      var host = window.location.hostname;
      var urlArr = host.split("/");
      if (urlArr.length > 2) {
          host = urlArr[2];
      }
      var ip = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;
      if (ip.test(host) === true || host === 'localhost') return '';
      var strAry = host.split('.');
      var level = domianStatus === true ? 2 : strAry.length;
      if (level < 2) {
          level = 2;
      }
      var urlDomain = [];
      if (strAry.length > 1) {
          if (strAry.length < level) {
              level = strAry.length;
          }
          for (var i = strAry.length - 1; i >= 0; i--) {
              if (urlDomain.length === level) {
                  break;
              }
              urlDomain.push(strAry[i]);
          }
      } else {
          return '';
      }
      return urlDomain.reverse().join('.');
  };

  var dataBase = 'ANALYSYS_AGENT';
  var tableName = 'FZ_STORAGE';
  var IndexedDb = /** @class */function () {
      function IndexedDb() {
          this.open();
      }
      // 打开数据库
      IndexedDb.prototype.open = function () {
          var _this = this;
          var request = window.indexedDB.open(dataBase);
          request.onsuccess = function (event) {
              _this.db = request.result;
              console.log('indexedDB数据库打开成功');
              _this.onConnectSuccess && _this.onConnectSuccess(_this.db);
          };
          request.onerror = function (event) {
              console.log('indexedDB数据库打开报错');
              _this.onConnectError && _this.onConnectError(event);
          };
          request.onupgradeneeded = function (event) {
              console.log('indexedDB数据库新建成功');
              var db = event.target.result;
              if (!db.objectStoreNames.contains(tableName)) {
                  db.createObjectStore(tableName, { keyPath: 'id' });
              }
          };
      };
      // 读取数据
      IndexedDb.prototype.get = function (successFn, errorFn) {
          var objectStore = this.db.transaction(tableName).objectStore(tableName);
          var request = objectStore.get(1);
          request.onsuccess = function (event) {
              successFn && successFn(request.result);
          };
          request.onerror = function (event) {
              console.log('事务失败');
              errorFn && errorFn(event);
          };
      };
      // 添加数据
      IndexedDb.prototype.add = function (data, successFn, errorFn) {
          var request = this.db.transaction(tableName, 'readwrite').objectStore(tableName).add(data);
          request.onsuccess = function (event) {
              console.log('数据写入成功');
              successFn && successFn(event);
          };
          request.onerror = function (event) {
              console.log('数据写入失败');
              errorFn && errorFn(event);
          };
      };
      // 编辑数据
      IndexedDb.prototype.edit = function () {};
      // 更新数据
      IndexedDb.prototype.put = function () {};
      return IndexedDb;
  }();

  var domainUrl = getDomainFromUrl(true);
  var cookieKey = domainUrl ? 'FZ_STROAGE.' + domainUrl : '';
  var storeDb = new IndexedDb();
  function getStorageV2(fn) {
      function getHistoryStorage() {
          // 跨子域
          if (config.crossSubdomain) {
              return (cookieKey ? getCookie(cookieKey) : null) || getLocalStorage() || null;
          }
          return getLocalStorage() || getCookie(cookieKey) || null;
      }
      if (globalWindow.indexedDB) {
          storeDb.onConnectSuccess = function () {
              storeDb.get(function (res) {
                  var data = res ? res.content : null;
                  fn(data);
              });
          };
      } else {
          fn(getHistoryStorage());
      }
  }
  function setStorageV2() {
      var data = getCore();
      storeDb.add({
          id: 1,
          content: data
      });
  }
  // 获取缓存数据
  function getStorage() {
      // 跨子域
      if (config.crossSubdomain) {
          return (cookieKey ? getCookie(cookieKey) : null) || getLocalStorage() || null;
      }
      return getLocalStorage() || getCookie(cookieKey) || null;
  }
  // 设置缓存数据
  function setStorage() {
      var data = getCore();
      if (config.crossSubdomain) {
          // 通用属性不存储在cookie里，防止太大
          var cookieData = __assign({}, data);
          delete cookieData.ARKSUPER;
          if (cookieKey) {
              setCookie(cookieKey, cookieData, {
                  expires: 365 * 20,
                  domain: domainUrl
              });
          }
      }
      setLocalStorage('FZ_STROAGE', data);
  }
  // 清空历史cookie，根据场景只保留一个
  function emptyHistoryCookie() {
      var ARKID = getCookie('ARK_ID');
      var ARKSTARTUP = getCookie('ARK_STARTUP');
      if (ARKID) {
          setCookie('ARK_ID', null, {
              domain: domainUrl
          });
      }
      if (ARKSTARTUP) {
          setCookie('ARK_STARTUP', null, {
              domain: domainUrl
          });
      }
      // 删掉cookie
      if (!config.crossSubdomain) {
          var cookie = cookieKey ? getCookie(cookieKey) : null;
          if (cookie) {
              setCookie(cookieKey, null, {
                  domain: domainUrl
              });
          }
      }
  }

  /*
  md5.js
  */
  function MD5(str, bit) {
      var sMessage = str;
      function RotateLeft(lValue, iShiftBits) {
          return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
      }
      function AddUnsigned(lX, lY) {
          var lX4, lY4, lX8, lY8, lResult;
          lX8 = lX & 0x80000000;
          lY8 = lY & 0x80000000;
          lX4 = lX & 0x40000000;
          lY4 = lY & 0x40000000;
          lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
          if (lX4 & lY4) return lResult ^ 0x80000000 ^ lX8 ^ lY8;
          if (lX4 | lY4) {
              if (lResult & 0x40000000) return lResult ^ 0xC0000000 ^ lX8 ^ lY8;else return lResult ^ 0x40000000 ^ lX8 ^ lY8;
          } else return lResult ^ lX8 ^ lY8;
      }
      function F(x, y, z) {
          return x & y | ~x & z;
      }
      function G(x, y, z) {
          return x & z | y & ~z;
      }
      function H(x, y, z) {
          return x ^ y ^ z;
      }
      function I(x, y, z) {
          return y ^ (x | ~z);
      }
      function FF(a, b, c, d, x, s, ac) {
          a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
          return AddUnsigned(RotateLeft(a, s), b);
      }
      function GG(a, b, c, d, x, s, ac) {
          a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
          return AddUnsigned(RotateLeft(a, s), b);
      }
      function HH(a, b, c, d, x, s, ac) {
          a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
          return AddUnsigned(RotateLeft(a, s), b);
      }
      function II(a, b, c, d, x, s, ac) {
          a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
          return AddUnsigned(RotateLeft(a, s), b);
      }
      function ConvertToWordArray(sMessage) {
          var lWordCount;
          var lMessageLength = sMessage.length;
          var lNumberOfWords_temp1 = lMessageLength + 8;
          var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
          var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
          var lWordArray = Array(lNumberOfWords - 1);
          var lBytePosition = 0;
          var lByteCount = 0;
          while (lByteCount < lMessageLength) {
              lWordCount = (lByteCount - lByteCount % 4) / 4;
              lBytePosition = lByteCount % 4 * 8;
              lWordArray[lWordCount] = lWordArray[lWordCount] | sMessage.charCodeAt(lByteCount) << lBytePosition;
              lByteCount++;
          }
          lWordCount = (lByteCount - lByteCount % 4) / 4;
          lBytePosition = lByteCount % 4 * 8;
          lWordArray[lWordCount] = lWordArray[lWordCount] | 0x80 << lBytePosition;
          lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
          lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
          return lWordArray;
      }
      function WordToHex(lValue) {
          var WordToHexValue = "",
              WordToHexValue_temp = "",
              lByte,
              lCount;
          for (lCount = 0; lCount <= 3; lCount++) {
              lByte = lValue >>> lCount * 8 & 255;
              WordToHexValue_temp = "0" + lByte.toString(16);
              WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
          }
          return WordToHexValue;
      }
      var x = [];
      var k, AA, BB, CC, DD, a, b, c, d;
      var S11 = 7,
          S12 = 12,
          S13 = 17,
          S14 = 22;
      var S21 = 5,
          S22 = 9,
          S23 = 14,
          S24 = 20;
      var S31 = 4,
          S32 = 11,
          S33 = 16,
          S34 = 23;
      var S41 = 6,
          S42 = 10,
          S43 = 15,
          S44 = 21;
      // Steps 1 and 2. Append padding bits and length and convert to words 
      x = ConvertToWordArray(sMessage);
      // Step 3. Initialise 
      a = 0x67452301;
      b = 0xEFCDAB89;
      c = 0x98BADCFE;
      d = 0x10325476;
      // Step 4. Process the message in 16-word blocks 
      for (k = 0; k < x.length; k += 16) {
          AA = a;
          BB = b;
          CC = c;
          DD = d;
          a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
          d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
          c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
          b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
          a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
          d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
          c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
          b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
          a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
          d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
          c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
          b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
          a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
          d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
          c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
          b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
          a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
          d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
          c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
          b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
          a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
          d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
          c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
          b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
          a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
          d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
          c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
          b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
          a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
          d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
          c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
          b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
          a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
          d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
          c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
          b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
          a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
          d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
          c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
          b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
          a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
          d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
          c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
          b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
          a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
          d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
          c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
          b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
          a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
          d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
          c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
          b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
          a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
          d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
          c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
          b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
          a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
          d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
          c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
          b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
          a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
          d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
          c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
          b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
          a = AddUnsigned(a, AA);
          b = AddUnsigned(b, BB);
          c = AddUnsigned(c, CC);
          d = AddUnsigned(d, DD);
      }
      if (bit === 32) {
          return WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);
      }
      return WordToHex(b) + WordToHex(c);
  }

  function dateFormat(date, format) {
      var offset_GMT = date.getTimezoneOffset();
      date = new Date(date.getTime() + offset_GMT * 60 * 1000 + 8 * 60 * 60 * 1000); //转换为东八区时间
      var o = {
          "M+": date.getMonth() + 1,
          "d+": date.getDate(),
          "h+": date.getHours(),
          "m+": date.getMinutes(),
          "s+": date.getSeconds(),
          "q+": Math.floor((date.getMonth() + 3) / 3),
          "S+": date.getMilliseconds() //millisecond
      };
      if (/(y+)/.test(format)) format = format.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
      for (var k in o) if (new RegExp("(" + k + ")").test(format)) format = format.replace(RegExp.$1, RegExp.$1.length == 3 ? ("" + o[k]).length < 3 ? ("00" + o[k]).substr(("00" + o[k]).length - 3, ("00" + o[k]).length) : o[k] : ("00" + o[k]).substr(("" + o[k]).length));
      return format;
  }
  function clientTimeZone() {
      var munites = new Date().getTimezoneOffset();
      var hour = munites / 60;
      var munite = munites % 60;
      var prefix = "-";
      if (hour <= 0 || munite < 0) {
          prefix = "+";
          hour = -hour;
          if (munite < 0) {
              munite = -munite;
          }
      }
      hour = hour + "";
      munite = munite + "";
      if (hour.length == 1) {
          hour = "0" + hour;
      }
      if (munite.length == 1) {
          munite = "0" + munite;
      }
      return prefix + hour + ':' + munite;
  }

  // 启动时间
  var startUpTime;
  // 初始化时获取启动时间
  function initStartUpTime() {
      var data = getCookie('ARK_STARTUP') || getLocalStorage('FZ_SESSION', true) || {};
      startUpTime = data;
  }
  // 设置启动时间
  function setStartUpTime() {
      startUpTime = {
          STARTUP: true,
          STARTUPTIME: dateFormat(new Date(), 'yyyy-MM-dd hh:mm:ss.SSS')
      };
      setLocalStorage('FZ_SESSION', startUpTime, true);
  }
  // 清空时间
  function clearStartUpTime() {
      startUpTime = {};
      window.sessionStorage.removeItem('FZ_SESSION');
  }

  /**
   * 对象浅拷贝
   *
   */
  function assign(target) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
      }
      for (var i = 0; i < args.length; i++) {
          var item = args[i];
          if (isObject(item)) {
              for (var key in item) {
                  target[key] = item[key];
              }
          }
      }
      return target;
  }

  /**
   * 返回核心数据默认值
   * @returns object
   */
  function coreDefault() {
      return {
          ARKAPPID: config.appkey,
          ARKDEBUG: config.debugMode,
          ARKUPLOADURL: config.uploadURL,
          ARKFRISTPROFILE: '',
          ARKSUPER: {},
          ARK_ID: setId(),
          FRISTDAY: 0,
          POSTDATA: [],
          SEESIONDATE: 0,
          SEESIONID: ''
      };
  }
  var core;
  /**
   * 初始化
   */
  function coreInit() {
      initStartUpTime();
      var storageCore = getStorage();
      function setDefCore() {
          clearStartUpTime();
          core = coreDefault();
          setStorage();
      }
      if (!storageCore) {
          setDefCore();
      } else {
          var debug = storageCore.ARKDEBUG;
          // 检测缓存appkey debug uploadurl是否和sdk初始化一致，不一致则重新生成匿名用户
          if (config.appkey !== storageCore.ARKAPPID || debug === 1 && debug !== config.debugMode || storageCore.ARKUPLOADURL !== config.uploadURL) {
              setDefCore();
          } else {
              core = storageCore;
          }
      }
      getStorageV2(function (data) {
          if (data) {
              core = data;
          } else {
              core = coreDefault();
              setStorageV2();
          }
      });
      // 5.0.0版本后，清空所有不需要的cookie，只根据场景保留一个
      emptyHistoryCookie();
  }
  function getCore() {
      return core;
  }
  // 重置缓存数据
  function resetCore() {
      core.ARK_ID = setId();
      core.ARK_TRACKID = '';
      core.ARK_LOGINID = '';
      core.ARKSUPER = {};
      core.ARKFRISTPROFILE = '';
      setSessionId();
      clearStartUpTime();
  }
  /**
   * 设置参数
   */
  function setCoreParam(key, value) {
      core[key] = value;
      setStorage();
  }
  /**
   * 获取当前用户id
   * 优先获取登录后id => 用户自定义匿名id => 系统生成匿名id
   */
  function getId() {
      return core.ARK_LOGINID || core.ARK_TRACKID || core.ARK_ID;
  }
  /**
   * 系统设置匿名id
   * @returns
   */
  function setId() {
      var timeRandom = new Date().getTime() + '' + Math.random() * 10000;
      return $ans + MD5(timeRandom, 32) + MD5(timeRandom, 32).slice(0, 4);
  }
  /**
   * 获取sessionId
   */
  function getSessionId() {
      var date = new Date();
      var nowDate = date.getTime();
      var offset_GMT = date.getTimezoneOffset();
      var nowDay = new Date(nowDate + offset_GMT * 60 * 1000 + 8 * 60 * 60 * 1000).getDate();
      var sessionDay = !core.SEESIONDATE ? 0 : new Date(core.SEESIONDATE + offset_GMT * 60 * 1000 + 8 * 60 * 60 * 1000).getDate();
      if (!core.SEESIONID || !core.SEESIONDATE || nowDate - core.SEESIONDATE > 30 * 60 * 1000 || sessionDay !== nowDay) {
          setSessionId();
      }
      return core.SEESIONID;
  }
  /**
   * 设置sessionid
   */
  function setSessionId() {
      var date = +new Date();
      core.SEESIONDATE = date;
      core.SEESIONID = MD5($ans + date + '' + Math.random(), 16);
      setStorage();
  }
  /**
   * 用户手动设置匿名id
   * @param xwho
   */
  function setAnonymousID(xwho) {
      core.ARK_TRACKID = xwho;
      setStorage();
  }
  /**
   * 获取用户通过identify接口设置或自动生成的id，优先级如下： 用户设置的id > 代码自动生成的id
   */
  function getAnonymousID() {
      return core.ARK_TRACKID || core.ARK_ID;
  }
  // 通用属性
  /**
   * 获取指定通用属性或全部通用属性
   * @param superPropertyName 属性名称
   * @returns
   */
  function getSuperProperty(superPropertyName) {
      if (superPropertyName) {
          return core.ARKSUPER[superPropertyName];
      }
      return core.ARKSUPER;
  }
  /**
   * 设置通用属性
   * @param property 属性
   */
  function setSuperProperty(property) {
      core.ARKSUPER = assign({}, core.ARKSUPER, property);
      setStorage();
  }
  /**
   * 删除指定通用属性或全部通用属性
   * @param superPropertyName 属性名称
   */
  function delSuperProperty(superPropertyName) {
      // 删除指定属性
      if (superPropertyName && core.ARKSUPER[superPropertyName]) {
          delete core.ARKSUPER[superPropertyName];
      }
      // 删除全部
      if (superPropertyName === undefined) {
          core.ARKSUPER = {};
      }
      setStorage();
  }
  // 添加上报数据
  function addPostData(option) {
      if (!core.POSTDATA) {
          core.POSTDATA = [];
      }
      if (core.POSTDATA.length < 200) {
          core.POSTDATA.push(option);
          setStorage();
      }
  }
  // 删除上报数据
  function delPostData(arrData) {
      var arrDataMap = {};
      arrData.forEach(function (o) {
          arrDataMap[o.xwhen] = 1;
      });
      for (var i = core.POSTDATA.length - 1; i >= 0; i--) {
          var item = core.POSTDATA[i];
          if (arrDataMap[item.xwhen]) {
              core.POSTDATA.splice(i, 1);
          }
      }
      setStorage();
  }
  // 获取上报数据
  function getPostData() {
      return __spreadArrays(core.POSTDATA);
  }

  // 类型转换
  /**
   * 值转换成字符串
   */
  function valToString(value) {
      if (value === undefined || value === null) {
          return '';
      }
      if (isObject(value)) {
          return JSON.stringify(value);
      }
      return value + '';
  }
  /**
   * json转换为串行字符串
   * @param value
   */
  function jsonToString(value) {
      var strArr = [];
      for (var key in value) {
          var newValue = value[key];
          if (isString(newValue)) {
              newValue = encodeURIComponent(value[key]);
          } else if (isObject(newValue)) {
              newValue = encodeURIComponent(JSON.stringify(value[key]));
          }
          strArr.push(key + '=' + newValue);
      }
      return strArr.join('&');
  }
  /**
   * headers字符串转json
   */
  function headersToJson(headers) {
      var arr = headers.trim().split(/[\r\n]+/);
      var headerMap = {};
      arr.forEach(function (line) {
          var parts = line.split(': ');
          var header = parts.shift();
          var value = parts.join(': ');
          headerMap[header] = value;
      });
      return headerMap;
  }

  function ajax (options, successFn, errorFn) {
      var xhr = new window.XMLHttpRequest() || new window.ActiveXObject('Microsoft.XMLHTTP') || new window.ActiveXObject('Msxml2.XMLHTTP');
      var method = (options.method || 'GET').toUpperCase();
      var url = options.url;
      var data = options.data;
      var header = assign({}, options.header);
      if (method === 'GET' && options.data) {
          var link = /\?/.test(options.url) ? '&' : '?';
          url += link + jsonToString(options.data);
      }
      if (method === 'POST' && options.data && !header['Content-Type']) {
          data = JSON.stringify(options.data);
      }
      // 建立连接
      xhr.open(method, url);
      // 设置请求头
      for (var key in header) {
          xhr.setRequestHeader(key, header[key]);
      }
      xhr.timeout = options.timeout;
      xhr.onreadystatechange = function () {
          if (xhr.readyState === 4) {
              if (xhr.status === 200) {
                  var res = {
                      header: headersToJson(xhr.getAllResponseHeaders()),
                      data: xhr.responseText
                  };
                  try {
                      res.data = JSON.parse(xhr.responseText);
                  } catch (err) {}
                  successFn && successFn(res, xhr);
                  options.success && options.success(res, xhr);
              } else {
                  errorFn && errorFn(xhr);
                  options.error && options.error(xhr);
              }
          }
      };
      // 发送数据
      xhr.send(data);
  }

  /**
   * 服务器时间，开始时间校准时用到
   */
  // 服务器时间
  var serverTime = 0;
  // 是否已获取过服务器时间
  var isGetServerTime = false;
  // 服务器时间与本地时间的差值
  var timeDiff = 0;
  /**
   * 返回校准后的当前时间
   *
   */
  function getNow() {
      var now = +new Date();
      return now + timeDiff;
  }
  // 获取服务器时间
  function getServerTime(fn) {
      if (!config.allowTimeCheck || serverTime) {
          isGetServerTime = true;
          fn && fn(serverTime);
          return;
      }
      ajax({
          url: config.uploadURL,
          timeout: 800
      }, function (res) {
          if (res && res.header && res.header.date) {
              var timeNow = +new Date();
              serverTime = +new Date(res.header.date);
              var diff = Math.abs((serverTime - timeNow) / 1000);
              // 开启时间校准
              if (diff > config.maxDiffTimeInterval) {
                  timeDiff = serverTime - timeNow;
                  successLog({
                      code: 20013,
                      value: dateFormat(new Date(serverTime), 'yyyy-MM-dd hh:mm:ss +SSS'),
                      key: dateFormat(new Date(timeNow), 'yyyy-MM-dd hh:mm:ss +SSS'),
                      fn: diff + 's'
                  });
              }
          }
          isGetServerTime = true;
          fn && fn(serverTime);
      }, function (err) {
          isGetServerTime = true;
          fn && fn(serverTime);
      });
  }

  var isReady = false;
  // 缓存sdk异步加载完成前的函数调用
  var cacheFn = globalWindow.AnalysysAgent && globalWindow.AnalysysAgent.param ? globalWindow.AnalysysAgent.param : [];
  var callbackArr = [];
  // 执行缓存函数
  function implementAallbackArr() {
      if (isGetServerTime && isInitConfig) {
          // 执行sdk异步加载完成前的缓存函数
          if (cacheFn && cacheFn.length) {
              cacheFn.forEach(function (o) {
                  var fn = globalWindow.AnalysysAgent[o.fn];
                  fn && fn.apply(void 0, o.arg);
              });
              cacheFn = null;
          }
          // 执行sdk没有初始化完成之前缓存函数
          if (callbackArr && callbackArr.length) {
              callbackArr.forEach(function (o) {
                  o.fn.apply(o.fn, o.arg);
              });
              callbackArr = [];
          }
          isReady = true;
      }
  }
  function ready(callback, isTop) {
      return function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          // 没有获取到ServerTime 和 初始化之前先把触发事件存起来，等初始化和ServerTime完成后再调用
          if (!isGetServerTime || !isInitConfig || !isReady) {
              var obj = {
                  fn: callback,
                  arg: args
              };
              isTop ? callbackArr.unshift(obj) : callbackArr.push(obj);
          } else {
              callback.apply(callback, args);
          }
      };
  }

  function setAttrs(superProperty, methodName) {
      var attrs = attrCheck(superProperty, methodName);
      if (Object.keys(attrs).length) {
          setSuperProperty(attrs);
          successLog({
              fn: methodName,
              code: 20002,
              value: superProperty
          });
      }
  }
  /**
   * 设置单个通用属性
   * @param name string
   * @param value string  number  boolean Array<string>
   */
  function registerSuperProperty(name, value, fn) {
      var _a;
      var methodName = '$registerSuperProperty';
      // 兼容用友传入的是对象
      if (isObject(name)) {
          setAttrs(name, methodName);
          fn && fn(getSuperProperty());
          return;
      }
      if (attrNameCheck(name, { code: 600023, fn: methodName, key: name })) {
          var obj = (_a = {}, _a[name] = value, _a);
          setAttrs(obj, methodName);
          fn && fn(getSuperProperty());
      }
  }
  /**
   * 设置多个属性
   * @param superProperty 属性
   * @returns
   */
  function registerSuperProperties(superProperty, fn) {
      setAttrs(superProperty, '$registerSuperProperties');
      fn && fn(getSuperProperty());
  }
  /**
   * 获取单个通用属性
   */
  function getSuperProperty$1(superPropertyName, fn) {
      var value = getSuperProperty(superPropertyName);
      fn && fn(value);
      return value;
  }
  /**
   * 获取所有通用属性
   */
  function getSuperProperties(fn) {
      var value = getSuperProperty();
      fn && fn(value);
      return value;
  }
  /**
   * 删除单个属性
   * @param superPropertyName 属性名称
   */
  function unRegisterSuperProperty(superPropertyName, fn) {
      delSuperProperty(superPropertyName);
      successLog({
          fn: '$unRegisterSuperProperty',
          code: 20003,
          value: superPropertyName
      });
      fn && fn(getSuperProperty());
  }
  /**
   * 删除所有属性
   */
  function clearSuperProperties(fn) {
      delSuperProperty();
      successLog({
          fn: '$clearSuperProperties',
          code: 20004
      });
      fn && fn(getSuperProperty());
  }

  function image (options, successFn, errorFn) {
      var img = new Image(1, 1),
          sendTime = null;
      img.crossOrigin = 'anonymous';
      // 清空
      function empty() {
          img.src = '';
          img.onload = null;
          img.onerror = null;
          img.onabort = null;
      }
      function success() {
          clearTimeout(sendTime);
          successFn && successFn({
              header: {},
              data: { code: 200 }
          });
          empty();
      }
      img.onload = function () {
          success();
      };
      img.onerror = function (e, v) {
          success();
      };
      // 超时后
      img.onabort = function () {
          empty();
          errorFn && errorFn();
      };
      var url = options.url;
      if (options.data) {
          var data = encode(options.data);
          var newData = setValidKey(data, url);
          url += "&data=" + encodeURIComponent(newData.data) + "&send_type=" + encodeURIComponent(newData.send_type);
      }
      // 超时后自动取消
      sendTime = setTimeout(function () {
          img.onabort();
      }, config.sendDataTimeout);
      img.src = url;
  }
  function setValidKey(optionData, url) {
      var data = {
          data: optionData,
          send_type: ''
      };
      var param = [];
      for (var key in data) {
          param.push(key + '=' + encodeURIComponent(data[key]));
      }
      var validurl = url + '&' + param.join('&');
      validurl = validurl.replace(config.uploadURL, '');
      var validValue = MD5(validurl, 32).split('');
      var validkey = validValue[2] + '' + validValue[0] + '' + validValue[4];
      data.send_type = validkey;
      return data;
  }

  var eventAttribute = {
      startup: {
          state: false,
          xwhen: 0
      },
      pageview: {
          xwhen: 0,
          state: {// 当前页面pageview上报状态
          },
          prevPath: document.referrer,
          path: document.location.href
      },
      webstay: {
          xwhen: 0
      },
      // 页面是否在卸载
      isUnload: false,
      // 事件发送成功后回调函数
      eventCallback: {},
      // 页面关闭
      pageClose: {
          // 页面隐藏时间
          hideTime: 0,
          // 页面开始隐藏时间
          hideStartTime: 0
      }
  };
  // 执行事件上报回调函数
  function implementEventCallback(data) {
      if (eventAttribute.eventCallback[data.xwhen]) {
          eventAttribute.eventCallback[data.xwhen](data);
          delete eventAttribute.eventCallback[data.xwhen];
      }
  }

  function beacon (options) {
      var url = options.url;
      var data = JSON.stringify(options.data);
      navigator.sendBeacon(url, data);
  }

  var isHybrid = false;
  var hybrid = {
      userId: ''
  };
  console.log('是否Hybrid模式', isHybrid);
  /**
   * 初始化webViewHybrid模式
   */
  function webViewHybridInit() {
      var AnalysysAgentHybrid = globalWindow.AnalysysAgentHybrid;
      if (AnalysysAgentHybrid) {
          if (AnalysysAgentHybrid.isHybrid) {
              isHybrid = AnalysysAgentHybrid.isHybrid();
              console.log('是否Hybrid模式', isHybrid);
          }
          if (AnalysysAgentHybrid.getAppStartInfo && isFunction(AnalysysAgentHybrid.getAppStartInfo)) {
              var webViewHybridData = AnalysysAgentHybrid.getAppStartInfo();
              console.log('Hybrid模式注入参数', webViewHybridData);
              if (isString(webViewHybridData)) {
                  webViewHybridData = JSON.parse(webViewHybridData);
              }
              hybrid.userId = webViewHybridData.userId;
          }
      }
  }

  var eventMap = {
      '$pageview': 'pageView',
      '$startup': 'startUp',
      '$alias': 'alias',
      'page_close': 'pageClose',
      '$profile_set_once': 'profileSetOnce',
      '$profile_set': 'profileSet',
      '$profile_increment': 'profileIncrement',
      '$profile_append': 'profileAppend',
      '$profile_unset': 'profileUnset',
      '$profile_delete': 'profileDelete'
  };
  function hybridSendDate (functionName, functionParams) {
      var _a, _b, _c, _d;
      var obj = {
          functionName: eventMap[functionName] || functionName,
          functionParams: ['', functionParams]
      };
      // ios
      (_c = (_b = (_a = globalWindow.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.AnalysysAgent) === null || _c === void 0 ? void 0 : _c.postMessage(obj);
      // 安卓
      (_d = globalWindow.AnalysysAgentHybrid) === null || _d === void 0 ? void 0 : _d.analysysHybridCallNative(JSON.stringify(obj));
  }

  // 一次最多上报20条
  var MAXLINENUM = 20;
  // 上报失败后重试次数
  var RETRNUM = 3;
  // 正在上报数据
  var doingList = [];
  // 当前重试次数
  var retryCount = 0;
  // 发送请求
  function postData() {
      // 待上报数据
      var todoList = getPostData();
      if (doingList.length || !todoList.length) {
          return;
      }
      // 取出最多 MAXLINENUM 条数据进入上报队列
      doingList = todoList.splice(0, MAXLINENUM);
      var option = {
          url: config.uploadURL + '/up' + '?appid=' + config.appkey,
          data: doingList,
          encryptType: config.encryptType
      };
      successLog({
          key: option.url,
          value: doingList,
          code: 20012
      });
      // 开启调试模式，不入库
      if (config.debugMode === 1) {
          delPostData(doingList);
          doingList = [];
          return;
      }
      // if (globalWindow.AnalysysAgent.encrypt && isFunction(globalWindow.AnalysysAgent.encrypt.uploadData)) {
      //   option = globalWindow.AnalysysAgent.encrypt.uploadData(option);
      // }
      ajax({
          url: option.url,
          method: 'POST',
          data: option.data,
          timeout: config.sendDataTimeout
      }, function () {
          // 成功后回调函数
          doingList.forEach(function (o) {
              implementEventCallback(o);
          });
          // 上报成功后删除队列与相应的缓存数据
          delPostData(doingList);
          doingList = [];
          // 继续上报剩下的数据，如果有的话
          postData();
          successLog({
              code: 20001
          });
          retryCount = 0;
      }, function () {
          doingList = [];
          errorLog({
              code: 60008
          });
          // 失败后重试上报，最多重试RETRNUM次
          if (retryCount < RETRNUM) {
              postData();
              retryCount++;
          }
      });
  }
  /**
   * img方式上报
   * @param data
   */
  function imgGetData(data) {
      var option = {
          url: config.uploadURL + '/up' + '?appid=' + config.appkey,
          data: JSON.stringify([data])
      };
      successLog({
          key: option.url,
          value: [data],
          code: 20012
      });
      image(option, function () {
          successLog({
              code: 20001
          });
          // 成功后回调函数
          implementEventCallback(data);
      }, function () {
          errorLog({
              code: 60008
          });
          addPostData(data);
          postData();
      });
  }
  /**
   * 上报数据
   * @param data object
   */
  function sendData(data, fn) {
      // Hybrid模式下由原生端上报
      if (isHybrid) {
          hybridSendDate(data.xwhat, data.xcontext);
          return;
      }
      if (!config.appkey) {
          errorLog({
              code: 60006
          });
          return;
      }
      if (!config.uploadURL) {
          errorLog({
              code: 60007
          });
          return;
      }
      // 设置回调函数
      if (fn && isFunction(fn)) {
          eventAttribute.eventCallback[data.xwhen] = fn;
      }
      // 页面卸载时采用beacon上报
      if (eventAttribute.isUnload && navigator && navigator.sendBeacon) {
          var option = {
              url: config.uploadURL + '/up' + '?appid=' + config.appkey,
              data: [data]
          };
          beacon(option);
          return;
      }
      if (config.sendType === 'img') {
          imgGetData(data);
      } else {
          // 加入待上报队列
          addPostData(data);
          postData();
      }
  }

  /**
   * 路径相关参数信息存储
   */
  var pathParams = {
      scene: null,
      utm_campaign_id: '',
      utm_source: '',
      utm_medium: '',
      utm_term: '',
      utm_content: '',
      utm_campaign: '',
      share_id: '',
      share_level: '',
      share_path: ''
  };

  /**
   * [getConstantStyle description] 返回元素对应的样式值
   * @param  {[type]} el     [description] 元素
   * @param  {[type]} pelStr [description] 样式名称
   * @return {[type]}        [description]
   */
  function getConstantStyle(el, pelStr) {
      var w = document.defaultView;
      if (w && w.getComputedStyle) {
          return document.defaultView.getComputedStyle(el, null)[pelStr];
      } else {
          return el.currentStyle[pelStr];
      }
  }
  /**
   * [eleCss description]根据元素对应css列表获取对应属性
   * @param  {[type]} element  [description]元素dom
   * @param  {[type]} property [description]css名称
   * @return {[type]} value [description]css名称对应值
   */
  function eleCss(element, property) {
      var len1, prop, props, q;
      if (!element) {
          return;
      }
      if (isString(property)) {
          return getConstantStyle(element, property);
      } else if (isArray(property)) {
          props = {};
          for (q = 0, len1 = property.length; q < len1; q++) {
              prop = property[q];
              props[prop] = getConstantStyle(element, prop);
          }
          return props;
      }
  }
  function getElementClassName(el) {
      var eleClassName = el.getAttribute('class') || '';
      if (eleClassName) {
          var eleClassList = eleClassName.split(' ');
          var eleClassArray = [];
          for (var i = 0; i < eleClassList.length; i++) {
              if (eleClassList[i] !== '') {
                  eleClassArray.push(eleClassList[i]);
              }
          }
          eleClassName = '.' + eleClassArray.join('.');
          return eleClassName;
      }
      return '';
  }
  function getElementTargetUrl(el) {
      var href = el.getAttribute('href');
      if (href && href.indexOf('javascript:') < 0) {
          try {
              href = decodeURIComponent(href);
          } catch (e) {}
          // if (config.isHybrid === true) {
          //   href = href.replace(/"/g, '\\"')
          // }
          return href;
      }
      return '';
  }
  // 获取元素内容
  function getElementContent(el) {
      var eleContent = '';
      if (el.tagName.toLowerCase() === 'input' && ['button', 'submit'].indexOf(el.type) > -1) {
          eleContent = el.value || '';
      } else if (el.tagName.toLowerCase() === 'img') {
          eleContent = el.getAttribute('alt') || el.getAttribute('title') || '';
      } else if (el.tagName.toLowerCase() === 'a') {
          eleContent = el.getAttribute('title') || '';
      }
      if (!eleContent) {
          var children = el.childNodes;
          for (var i = 0; i < children.length; i++) {
              if (children[i].nodeType === 3) {
                  eleContent += children[i].nodeValue;
              }
          }
      }
      if (eleContent && isString(eleContent)) {
          eleContent = eleContent.replace(/[\r\n]/g, ' ').replace(/[ ]+/g, ' ');
      } else {
          eleContent = '';
      }
      return eleContent.trim();
  }
  // 获取元素路径
  function getElementPath(el) {
      var list = [];
      var parent = el;
      while (parent != null) {
          var index = 0;
          if (parent.parentNode) {
              var clildrenEles = parent.parentNode.children;
              if (clildrenEles) {
                  for (var i = 0; i < clildrenEles.length; i++) {
                      if (clildrenEles[i] === parent) {
                          index = i;
                      }
                  }
              }
          }
          var tagName = parent.tagName;
          if (!tagName) {
              parent = parent.parentNode;
              continue;
          }
          tagName = tagName.toLowerCase();
          if (tagName === 'button') {
              list = [];
          }
          var parentID = parent.id ? '#' + parent.id : '';
          var eleClassNameList = parent.className && isString(parent.className) ? parent.className.split(' ') : [];
          if (eleClassNameList.length > 0) {
              var eleClassName = '';
              for (var y = 0; y < eleClassNameList.length; y++) {
                  if (eleClassNameList[y] && eleClassNameList[y].indexOf('ARK') < 0) {
                      eleClassName += '.' + eleClassNameList[y];
                  }
              }
              list.push(tagName + parentID + eleClassName + '|' + index);
          } else {
              list.push(tagName + parentID + '|' + index);
          }
          parent = parent.parentNode;
      }
      return list.join('<');
  }
  function getElementScroll(ele) {
      var scrollTop = 0;
      var scrollLeft = 0;
      while (ele !== null && ele !== document.body) {
          if (ele.nodeType === 1) {
              scrollTop += ele.scrollTop;
              scrollLeft += ele.scrollLeft;
          }
          ele = ele.parentNode;
      }
      return {
          scrollLeft: scrollLeft,
          scrollTop: scrollTop
      };
  }
  /**
   * [parserDom description]根据元素及其上层元素获取元素位置及显示/隐藏
   * @param  {[type]} ele [description] 元素Dom对象
   * @return {[type]} obj [description] 元素对应位置与显示/隐藏
   */
  function getElementOffset(ele) {
      var realTop = 0;
      var realLeft = 0;
      var elemHidden = false;
      var isFixed = false;
      while (ele != null) {
          if (ele.offsetTop === undefined) {
              ele = ele.parentNode;
              continue;
          }
          realTop += ele.offsetTop;
          realLeft += ele.offsetLeft;
          if (!elemHidden) {
              elemHidden = !!(eleCss(ele, 'display') === 'none' || eleCss(ele, 'width') === '0px' || eleCss(ele, 'height') === '0px');
          }
          if (eleCss(ele, 'position') === 'fixed') {
              isFixed = true;
          }
          ele = ele.offsetParent;
      }
      if (isFixed === true) {
          realTop += document.documentElement.scrollTop || document.body.scrollTop;
          realLeft += document.documentElement.scrollLeft || document.body.scrollLeft;
      }
      return {
          top: realTop,
          left: realLeft,
          hidden: elemHidden
      };
  }

  /**
   * 全埋点相关属性存储
   */
  var userClickAttrs = {};
  var webClickAttrs = {};
  function setUserClickAttrs(el) {
      userClickAttrs.element_id = el.getAttribute('id') || '';
      userClickAttrs.element_content = getElementContent(el);
      userClickAttrs.element_type = el.tagName.toLowerCase();
      userClickAttrs.element_name = el.getAttribute('name') || '';
      userClickAttrs.element_class_name = getElementClassName(el);
      userClickAttrs.element_target_url = getElementTargetUrl(el);
      userClickAttrs.element_path = getElementPath(el);
  }
  function setWebClickAttrs(e) {
      var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
      var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
      var x = e.pageX || e.clientX + scrollX;
      var y = e.pageY || e.clientY + scrollY;
      var el = e.target || e.srcElement;
      webClickAttrs.click_x = x;
      webClickAttrs.click_y = y;
      var eleScr = getElementScroll(el);
      var eleOff = getElementOffset(el);
      webClickAttrs.element_x = x - (eleOff.left - eleScr.scrollLeft);
      webClickAttrs.element_y = y - (eleOff.top - eleScr.scrollTop);
      webClickAttrs.element_clickable = elementClickableCheck(el) ? 1 : 0;
  }

  // 获取设备类型
  function getDeviceType() {
      var u = globalWindow.navigator.userAgent;
      if (u.indexOf('Tablet') > -1 && u.indexOf('PC') < 0 || u.indexOf('Pad') > -1 || u.indexOf('Nexus 7') > -1) {
          return 'tablet';
      }
      if (u.indexOf('Mobi') > -1 || u.indexOf('iPh') > -1 || u.indexOf('480') > -1) {
          return 'phone';
      }
      return 'desktop';
  }
  // 动态加载js
  function loadJs(fillPath, fn) {
      var createScript = document.createElement('script');
      createScript.type = 'text/javascript';
      createScript.async = true;
      createScript.src = fillPath;
      createScript.onload = fn;
      var body = document.getElementsByTagName('body')[0] || document.getElementsByTagName('head')[0];
      if (body) {
          body.appendChild(createScript);
      }
  }

  /**
   * 获取属性值
   */
  var getAttr = {
      xwho: function () {
          return hybrid.userId || getId();
      },
      xwhen: function () {
          return getNow();
      },
      xwhat: function (xwhat) {
          return xwhat;
      },
      $lib: function () {
          return $lib;
      },
      $lib_version: function () {
          return $lib_version;
      },
      $platform: function () {
          return $lib;
      },
      $debug: function () {
          return config.debugMode;
      },
      $is_login: function () {
          return !!core.ARK_LOGINID;
      },
      $session_id: function () {
          return getSessionId();
      },
      $screen_width: function () {
          return globalWindow.screen.width || 0;
      },
      $screen_height: function () {
          return globalWindow.screen.height || 0;
      },
      $language: function () {
          return (globalWindow.navigator.language || globalWindow.navigator.browserLanguage).toLowerCase();
      },
      $user_agent: function () {
          return globalWindow.navigator.userAgent.replace(/"/g, '\\"');
      },
      $time_zone: function () {
          return 'GMT' + clientTimeZone();
      },
      $startup_time: function () {
          return startUpTime.STARTUPTIME;
      },
      // 是否安装后首次访问
      $is_first_time: function () {
          return !core.FRISTDAY;
      },
      // 是否安装后首日访问
      $is_first_day: function () {
          if (!core.FRISTDAY) {
              return true;
          }
          if (isString(core.FRISTDAY)) {
              return dateFormat(new Date(getNow()), 'yyyyMMdd') === core.FRISTDAY;
          }
          if (isNumber(core.FRISTDAY)) {
              return dateFormat(new Date(getNow()), 'yyyyMMdd') === dateFormat(new Date(core.FRISTDAY), 'yyyyMMdd');
          }
          return false;
      },
      $first_visit_time: function () {
          return core.ARKFRISTPROFILE;
      },
      $first_visit_language: function () {
          return '';
      },
      $original_id: function () {
          return core.ARK_TRACKID || core.ARK_ID;
      },
      // 是否校准了时间
      $is_time_calibrated: function () {
          return config.allowTimeCheck && timeDiff ? true : false;
      },
      $referrer: function () {
          return eventAttribute.pageview.prevPath;
      },
      $title: function () {
          return document.title;
      },
      $url: function () {
          return eventAttribute.pageview.path;
      },
      $url_path: function () {
          return '';
      },
      // 页面URL-去参的页面URL
      $url_domain: function () {
          return '';
      },
      $utm_campaign_id: function () {
          return pathParams.utm_campaign_id;
      },
      $utm_source: function () {
          return pathParams.utm_source;
      },
      $utm_medium: function () {
          return pathParams.utm_medium;
      },
      $utm_term: function () {
          return pathParams.utm_term;
      },
      $utm_content: function () {
          return pathParams.utm_content;
      },
      $utm_campaign: function () {
          return pathParams.utm_campaign;
      },
      // 点击元素相关
      $element_content: function () {
          return valToString(userClickAttrs.element_content);
      },
      $element_id: function () {
          return valToString(userClickAttrs.element_id);
      },
      $element_type: function () {
          return valToString(userClickAttrs.element_type);
      },
      $element_name: function () {
          return valToString(userClickAttrs.element_name);
      },
      $element_class_name: function () {
          return valToString(userClickAttrs.element_class_name);
      },
      $element_target_url: function () {
          return valToString(userClickAttrs.element_target_url);
      },
      $element_path: function () {
          return valToString(userClickAttrs.element_path);
      },
      $page_width: function () {
          return document.documentElement.scrollWidth;
      },
      $page_height: function () {
          return document.documentElement.scrollHeight;
      },
      $click_x: function () {
          return webClickAttrs.click_x;
      },
      $click_y: function () {
          return webClickAttrs.click_y;
      },
      $element_x: function () {
          return webClickAttrs.element_x;
      },
      $element_y: function () {
          return webClickAttrs.element_y;
      },
      $element_clickable: function () {
          return webClickAttrs.element_clickable;
      },
      $viewport_width: function () {
          return document.documentElement.clientWidth || document.body.clientWidth;
      },
      $viewport_height: function () {
          return document.documentElement.clientHeight || document.body.clientHeight;
      },
      $viewport_position: function () {
          return document.documentElement.scrollTop || document.body.scrollTop;
      },
      $event_duration: function () {
          var duration = +new Date() - (eventAttribute.webstay.xwhen || eventAttribute.pageview.xwhen);
          if (duration > config.webstayDuration) {
              return config.webstayDuration;
          }
          return duration;
      },
      // 设备类型
      $device_type: function () {
          return getDeviceType();
      },
      // 是否爬虫
      $web_crawler: function () {
          return isSpider();
      }
  };

  function fillData (eventName) {
      var obj = {
          appid: config.appkey,
          xwho: getAttr.xwho(),
          xwhat: getAttr.xwhat(eventName),
          xwhen: getAttr.xwhen(),
          xcontext: {}
      };
      var event = events[eventName];
      // 设置事件属性
      function setEventAttr(attrName) {
          var getAttrFn = getAttr[attrName];
          if (getAttrFn) {
              var value = getAttrFn();
              if (value !== '' && value !== null && value !== undefined) {
                  obj.xcontext[attrName] = value;
              }
          }
      }
      // 填充公共属性
      publicAttrs.forEach(function (o) {
          setEventAttr(o);
      });
      // 填充事件私有属性
      if (event) {
          event.forEach(function (o) {
              setEventAttr(o);
          });
      }
      return obj;
  }

  function pageView(pageName, properties, fn) {
      // 排除黑名单
      if (autoClickBlackListCheck(config.pageViewBlackList)) {
          return;
      }
      var eventName = '$pageview';
      var userObj = {},
          customProperties = {};
      if (lengthCheck(pageName)) {
          userObj['$title'] = pageName;
          if (properties) {
              customProperties = attrCheck(properties, eventName);
          }
      }
      userObj = assign({}, customProperties, userObj);
      // 获取上报数据模块
      var res = fillData(eventName);
      // 重置webstay触发时间
      eventAttribute.webstay.xwhen = 0;
      // 记录浏览页面时间
      eventAttribute.pageview.xwhen = res.xwhen;
      // 合并通用属性 // 绑定页面属性 // 绑定传入的属性
      res.xcontext = assign({}, res.xcontext, getSuperProperty(), config.pageProperty, userObj);
      sendData(res, fn);
  }

  /**
   * 页面属性
   */
  var pageProperty = {};
  /**
   * 设置页面属性
   * @param properties
   */
  function setPageProperty(properties) {
    pageProperty = assign({}, pageProperty, properties);
  }
  /**
   * 获取页面属性
   * @returns
   */
  function getPageProperty() {
    return pageProperty;
  }
  /**
   * 删除页面属性
   */
  function delPageProperty() {
    pageProperty = {};
  }

  function sendProfile(eventName, propertyName, propertyValue, fn) {
      // 获取上报数据模块
      var res = fillData(eventName);
      // 删除掉不相关属性
      commonAttrs.forEach(function (o) {
          if (res.xcontext[o]) {
              delete res.xcontext[o];
          }
      });
      var property = {};
      if (isObject(propertyName)) {
          property = propertyName;
      }
      if (lengthCheck(propertyName) && attrValueCheck(propertyValue)) {
          property[propertyName] = propertyValue;
      }
      res.xcontext = assign({}, res.xcontext, attrCheck(property, eventName));
      // 回调函数
      var callback = fn ? fn : null;
      if (isFunction(propertyValue) && !fn) {
          callback = propertyValue;
      }
      sendData(res, callback);
  }
  /**
   * 设置用户固有属性
   * @param propertyName
   * @param propertyValue
   */
  function profileSetOnce(propertyName, propertyValue, fn) {
      sendProfile('$profile_set_once', propertyName, propertyValue, fn);
  }
  /**
   * 给用户设置单个或多个属性，如果之前不存在，则新建，否则覆盖
   * @param propertyName
   * @param propertyValue
   */
  function profileSet(propertyName, propertyValue, fn) {
      sendProfile('$profile_set', propertyName, propertyValue, fn);
  }
  /**
   * 设置用户属性的相对变化值(相对增加，减少)，只能对数值型属性进行操作，如果这个 Profile之前不存在，则初始值为0。
   * @param propertyName
   * @param propertyValue
   */
  function profileIncrement(propertyName, propertyValue, fn) {
      sendProfile('$profile_increment', propertyName, propertyValue, fn);
  }
  /**
   * 用户列表属性增加元素。
   * @param propertyName
   * @param propertyValue
   */
  function profileAppend(propertyName, propertyValue, fn) {
      sendProfile('$profile_append', propertyName, propertyValue, fn);
  }
  /**
   * 删除当前用户单个属性值
   * @param propertyName
   */
  function profileUnset(propertyName, fn) {
      var _a;
      // 获取上报数据模块
      var res = fillData('$profile_unset');
      // 删除掉不相关属性
      commonAttrs.forEach(function (o) {
          if (res.xcontext[o]) {
              delete res.xcontext[o];
          }
      });
      if (attrNameCheck(propertyName)) {
          res.xcontext = assign({}, res.xcontext, (_a = {}, _a[propertyName] = '', _a));
      } else {
          errorLog({
              code: 600010,
              fn: 'profileUnset',
              key: propertyName
          });
      }
      sendData(res, fn);
  }
  /**
   * 删除当前用户所有属性值
   */
  function profileDelete(fn) {
      // 获取上报数据模块
      var res = fillData('$profile_delete');
      // 删除掉不相关属性
      commonAttrs.forEach(function (o) {
          if (res.xcontext[o]) {
              delete res.xcontext[o];
          }
      });
      sendData(res, fn);
  }

  function startUp() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      // 获取上报数据模型
      var res = fillData('$startup');
      // 设置首次启动时间
      if (!core.ARKFRISTPROFILE) {
          setCoreParam('ARKFRISTPROFILE', dateFormat(new Date(res.xwhen), 'yyyy-MM-dd hh:mm:ss.SSS'));
          // 是否已发送首次用户属性，没有则发送
          if (config.autoProfile) {
              profileSetOnce();
          }
      }
      if (!startUpTime.STARTUP) {
          // 设置启动时间
          setStartUpTime();
          // 合并通用属性
          res.xcontext = assign({}, res.xcontext, getSuperProperty());
          // 记录启动时间
          eventAttribute.startup.xwhen = res.xwhen;
          sendData(res);
      }
  }

  function alias(aliasId, fn) {
      // 验证id是否符合格式
      if (!lengthCheck(aliasId)) {
          errorLog({
              code: 60005,
              value: aliasId,
              fn: 'alias'
          });
          return false;
      }
      // 设置登录后id
      setCoreParam('ARK_LOGINID', aliasId);
      successLog({
          code: 20014
      });
      // 获取上报数据模块
      var res = fillData('$alias');
      // 删除掉不相关属性
      commonAttrs.forEach(function (o) {
          if (res.xcontext[o]) {
              delete res.xcontext[o];
          }
      });
      // 是否设置自动采集
      if (config.autoProfile === true) {
          sendData(res, fn);
          profileSetOnce();
      } else {
          sendData(res, fn);
      }
  }

  function userClick(event) {
      if (!config.autoTrack) {
          return;
      }
      var el = event.target || event.srcElement;
      // 不做上报的页面路径
      var autoClickBlackList = config.autoClickBlackList;
      if (autoClickBlackListCheck(autoClickBlackList, el)) {
          return;
      }
      // 是否可以点击的页面元素
      if (!elementClickableCheck(el)) {
          return;
      }
      // 获取用户自定义上报属性
      var configUserClickPro = config.userClickProperty;
      var userClickPro = {};
      if (isObject(configUserClickPro)) {
          for (var key in configUserClickPro) {
              var item = configUserClickPro[key];
              if (isFunction(item)) {
                  userClickPro[key] = item.call(item, el);
              } else {
                  userClickPro[key] = item;
              }
          }
      } else if (isFunction(configUserClickPro)) {
          userClickPro = configUserClickPro.call(configUserClickPro, el);
      }
      // ???属性
      var property = el.getAttribute('data-ark-click') || {};
      if (isString(property)) {
          try {
              property = JSON.parse(property);
          } catch (e) {}
      }
      if (!isObject(property)) {
          property = {};
      }
      // 设置全埋点预制属性
      setUserClickAttrs(el);
      // 获取上报数据模块
      var res = fillData('$user_click');
      // 合并通用属性
      res.xcontext = assign({}, res.xcontext, getSuperProperty(), userClickPro, property);
      sendData(res);
  }

  function webClick(event) {
      var el = event.target || event.srcElement;
      // 设置点击相关预制属性
      setUserClickAttrs(el);
      // 设置热图相关属性
      setWebClickAttrs(event);
      // 获取上报数据模块
      var res = fillData('$web_click');
      // 合并通用属性
      res.xcontext = assign({}, res.xcontext);
      sendData(res);
  }

  function webClick$1() {
      // 获取上报数据模块
      var res = fillData('$webstay');
      // 合并通用属性
      res.xcontext = assign({}, res.xcontext);
      eventAttribute.webstay.xwhen = res.xwhen;
      sendData(res);
  }

  function reset(fn) {
      resetCore();
      if (config.autoProfile === true) {
          profileSetOnce({
              '$reset_time': dateFormat(new Date(), 'yyyy-MM-dd hh:mm:ss.SSS')
          });
      }
      successLog({
          fn: '$reset',
          code: 20005
      });
      fn && fn();
  }

  /**
  * 获取预置属性
  * @returns object
  */
  function getPresetProperties(fn) {
      // 获取上报数据模块
      var res = fillData('$getPresetProperties');
      delete res.xcontext.$is_login;
      successLog({
          code: 20010,
          fn: 'getPresetProperties',
          value: res.xcontext
      });
      fn && fn(res.xcontext);
      return res.xcontext;
  }

  function track(eventName, eventAttrs, fn) {
      if (!/^[a-zA-Z$][a-zA-Z0-9_]{1,99}$|^[a-zA-Z]$/.test(eventName)) {
          errorLog({
              code: 600025,
              fn: 'track',
              value: eventName
          });
          return;
      }
      // 获取上报数据模块
      var res = fillData(eventName);
      var trackAttrs = {};
      if (eventAttrs && !isFunction(eventAttrs)) {
          trackAttrs = attrCheck(eventAttrs, eventName);
      }
      // 合并通用属性
      res.xcontext = assign({}, res.xcontext, getSuperProperty(), trackAttrs);
      // 回调函数
      var callback = fn ? fn : null;
      if (isFunction(eventAttrs) && !fn) {
          callback = eventAttrs;
      }
      sendData(res, callback);
  }

  /**
   * 唯一匿名ID标识设置
   * @param distinctId 自定义设备身份标识，取值长度 1 - 255字符, 支持类型：String
   */
  function identify(distinctId, fn) {
      if (lengthCheck(distinctId)) {
          setAnonymousID(distinctId);
          successLog({
              code: 20002,
              value: distinctId,
              fn: 'identify'
          });
          fn && fn();
          // ea 触达
          globalWindow.AnalysysModal && globalWindow.AnalysysModal([{ xwhat: '$identify', xwho: distinctId }]);
      } else {
          errorLog({
              code: 60009,
              fn: 'identify',
              value: distinctId
          });
      }
  }
  /**
   * 获取用户通过identify接口设置或自动生成的id，优先级如下： 用户设置的id > 代码自动生成的id
   * @returns
   */
  function getDistinctId(fn) {
      var id = getAnonymousID();
      fn && fn(id);
      return id;
  }

  /**
   * 注册页面自动采集自定义属性
   */
  function pageProperty$1(properties) {
      var methodName = '$pageProperty';
      var attrs = attrCheck(properties, methodName);
      setPageProperty(attrs);
      if (Object.keys(attrs).length) {
          successLog({
              fn: methodName,
              code: 20002,
              value: properties
          });
      }
  }

  function pageClose() {
      // 获取上报数据模块
      var res = fillData('page_close');
      // 过滤掉某些机型获取不到$url的pageclose
      if (res.xcontext && !res.xcontext.$url) {
          return;
      }
      function getHideTime() {
          if (!eventAttribute.pageClose.hideStartTime) {
              return eventAttribute.pageClose.hideTime;
          } else {
              return eventAttribute.pageClose.hideTime + (res.xwhen - eventAttribute.pageClose.hideStartTime);
          }
      }
      var attrs = {
          pagestaytime: res.xwhen - eventAttribute.pageview.xwhen - getHideTime()
      };
      // 合并通用属性 // 绑定页面属性
      res.xcontext = assign({}, res.xcontext, getSuperProperty(), getPageProperty(), attrs);
      // 删除页面属性
      delPageProperty();
      sendData(res);
      eventAttribute.pageClose.hideStartTime = 0;
      eventAttribute.pageClose.hideTime = 0;
  }
  // 触发pageclose
  function triggerPageClose() {
      if (config.autoPageViewDuration && eventAttribute.pageview.xwhen) {
          pageClose();
      }
      eventAttribute.pageview.prevPath = eventAttribute.pageview.path;
      eventAttribute.pageview.path = document.location.href;
  }
  // 设置页面隐藏时间
  function setPageHideTime(hideFn, showFn) {
      if ('onvisibilitychange' in document && config.autoPageViewDuration) {
          document.addEventListener('visibilitychange', function () {
              if (document.hidden) {
                  eventAttribute.pageClose.hideStartTime = +new Date();
              } else {
                  eventAttribute.pageClose.hideTime = eventAttribute.pageClose.hideTime + (+new Date() - eventAttribute.pageClose.hideStartTime);
                  eventAttribute.pageClose.hideStartTime = 0;
              }
          });
      }
  }

  // 获取dom元素标签名称
  function getTagName(el) {
      return el && el.tagName && el.tagName.toLowerCase() || '';
  }
  // 返回dom元素父节点
  function getParentNode(el) {
      return el.parentNode;
  }
  // 获取所有兄弟节点（包括自己）
  function getbrotherNode(el) {
      var parentNode = getParentNode(el);
      return parentNode ? parentNode.children : null;
  }
  // 获取元素在同级中的下标
  function getEleIndex(el) {
      var list = getbrotherNode(el);
      if (list) {
          for (var i = 0; i < list.length; i++) {
              if (list[i] === el) {
                  return i;
              }
          }
      }
      return -1;
  }
  // 遍历节点树
  function eleForEach(el, fn) {
      while (el) {
          var isBreak = fn && fn(el);
          // 返回break则推出循环
          if (isBreak === 'break') {
              break;
          }
          el = el.parentNode;
      }
  }

  var visualMap = null;
  var href = globalWindow.location.href;
  // 上报可视化数据
  function visualClick(e) {
      if (!visualMap) {
          return false;
      }
      var pathList = [];
      eleForEach(e.target || e.srcElement, function (el) {
          pathList.push(el);
          if (getTagName(el) === 'body') {
              return 'break';
          }
      });
      var max = pathList.length - 2;
      function getPath(min) {
          var path = '';
          var pathIndex = '';
          for (var i = max; i >= min; i--) {
              var item = pathList[i];
              var tagName = getTagName(pathList[i]);
              if (tagName) {
                  var str = tagName + (item.id ? "#" + item.id : '');
                  path += str;
                  pathIndex += str;
                  if (tagName !== 'html' && tagName !== 'body' && !item.id) {
                      pathIndex += "" + getEleIndex(item);
                  }
                  if (tagName === 'button') {
                      break;
                  }
              }
          }
          return {
              path: path, pathIndex: pathIndex
          };
      }
      // 获取dom链条组合
      var pathArr = [];
      for (var i = 0; i < max; i++) {
          var _a = getPath(i),
              path = _a.path,
              pathIndex = _a.pathIndex;
          pathArr.push(path, pathIndex);
      }
      // 匹配链条对应的可视化埋点
      var itemMap = {};
      pathArr.forEach(function (o) {
          var item = visualMap[o];
          if (item && !itemMap[item.appEventId]) {
              itemMap[item.appEventId] = item;
          }
      });
      var _loop_1 = function (key) {
          var attrs = {};
          itemMap[key].properties.forEach(function (o) {
              attrs[o.key] = o.value;
          });
          track(key, attrs);
      };
      // 上报可视化埋点数据
      for (var key in itemMap) {
          _loop_1(key);
      }
  }
  // 获取可视化埋点数据
  function getVisualList() {
      var visitorConfigURL = config.visitorConfigURL;
      if (visitorConfigURL && href.indexOf('arkheatmap=true') === -1 && href.indexOf('visual=true') === -1) {
          ajax({
              url: visitorConfigURL + 'configure',
              data: {
                  appkey: config.appkey,
                  lib: 'Js',
                  url: window.location.href
              },
              timeout: config.getDataTimeout
          }, function (res) {
              var list = res.data.data;
              if (list && list.length) {
                  visualMap = {};
                  list.forEach(function (o) {
                      var path = '';
                      for (var i = o.new_path.length - 3; i >= 0; i--) {
                          var item = o.new_path[i];
                          var tagName = item.tagName;
                          var str = tagName + (item.id ? "#" + item.id : '') + (item.row !== undefined && !item.id ? item.row : '');
                          path += str;
                      }
                      visualMap[path] = o;
                  });
              } else {
                  visualMap = null;
              }
          });
      }
  }
  // 动态加载可视化交互文件
  function loadVisual() {
      // 设置可视化埋点
      if (href.indexOf('visual=true') > -1 && config.visitorConfigURL) {
          loadJs((config.SDKFileDirectory || '/sdk/') + "AnalysysAgent_JS_SDK_VISUAL.min.js");
      }
  }

  var scrollTime = null;
  // 是否采集页面属性
  function triggerPageView() {
      triggerPageClose();
      if (config.auto) {
          ready(pageView)();
      } else {
          eventAttribute.webstay.xwhen = 0;
          eventAttribute.pageview.xwhen = +new Date();
      }
      // 获取可视化数据
      getVisualList();
  }
  /**
   * sdk自动触发器
   */
  function autoTrigger() {
      startUp();
      triggerPageView();
      // 监听路径变化
      if (config.hash) {
          pathChange(function () {
              var path = eventAttribute.pageview.path;
              if (path !== document.location.href) {
                  triggerPageView();
              }
          });
      }
      // 退出页面监听
      var closeEventName = 'onpageshow' in globalWindow ? 'pagehide' : 'beforeunload';
      globalWindow.addEventListener(closeEventName, function () {
          // 设置页面卸载状态
          eventAttribute.isUnload = true;
          triggerPageClose();
      });
      var deviceType = getDeviceType();
      // 全埋点
      if (config.autoTrack || config.visitorConfigURL) {
          var eventName = deviceType === 'desktop' ? 'mousedown' : 'touchstart';
          document.addEventListener(eventName, function (e) {
              userClick(e);
              visualClick(e);
          });
      }
      var href = globalWindow.location.href;
      var SDKFileDirectory = config.SDKFileDirectory || '/sdk/';
      // 热图
      if (config.autoHeatmap) {
          if (href.indexOf('arkheatmap=true') === -1) {
              if (href.indexOf('visual=true') === -1) {
                  // 不是是在热图模式和可视化模式下上报热图数据
                  var eventName = deviceType === 'desktop' ? 'click' : 'touchstart';
                  document.addEventListener(eventName, webClick);
                  // 滚动行为
                  document.addEventListener('scroll', function () {
                      clearTimeout(scrollTime);
                      scrollTime = setTimeout(function () {
                          webClick$1();
                      }, 1000);
                  });
              }
          } else {
              // 动态加载热图显示文件
              loadJs(SDKFileDirectory + "AnalysysAgent_JS_SDK_HEATMAP.min.js");
          }
      }
      // 动态加载可视化交互文件
      loadVisual();
      // 记录页面隐藏时间
      setPageHideTime();
  }

  function nameListCheck(value) {
      if (isString(value)) {
          return true;
      } else if (isFunction(value)) {
          return true;
      } else if (isArray(value)) {
          for (var i = 0; i < value.length; i++) {
              var item = value[i];
              if (!isString(item) && !isFunction(item)) {
                  return false;
              }
          }
          return true;
      }
  }
  var configRule = {
      appkey: {
          verify: [lengthCheck]
      },
      uploadURL: {
          verify: [lengthCheck]
      },
      debugMode: {
          verify: [isNumber]
      },
      name: {
          verify: [isString]
      },
      auto: {
          verify: [isBoolean]
      },
      autoProfile: {
          verify: [isBoolean]
      },
      encryptType: {
          verify: [isNumber]
      },
      hash: {
          verify: [isBoolean]
      },
      allowTimeCheck: {
          verify: [isBoolean]
      },
      maxDiffTimeInterval: {
          verify: [isNumber, function (value) {
              if (value <= 0) {
                  return false;
              }
              return true;
          }]
      },
      autoTrack: {
          verify: [isBoolean]
      },
      autoCompleteURL: {
          verify: [isBoolean]
      },
      autoPageViewDuration: {
          verify: [isBoolean]
      },
      sendDataTimeout: {
          verify: [isNumber]
      },
      sendType: {
          verify: [isString]
      },
      autoClickBlackList: {
          verify: [nameListCheck]
      },
      autoHeatmap: {
          verify: [isBoolean]
      },
      SDKFileDirectory: {
          verify: [isString]
      },
      visitorConfigURL: {
          verify: [isString]
      },
      crossSubdomain: {
          verify: [isBoolean]
      },
      pageProperty: {
          verify: [isObject]
      },
      pageViewBlackList: {
          verify: [nameListCheck]
      },
      userClickProperty: {
          verify: [isObject]
      }
  };
  var config = optionsDefault();
  // 是否初始化参数配置
  var isInitConfig = false;
  function setConfig(options, fn) {
      var optionArr = Object.keys(options);
      optionArr.forEach(function (o) {
          var rule = configRule[o];
          if (rule && rule.verify.length) {
              var value = options[o];
              var isOk = true;
              for (var i = 0; i < rule.verify.length; i++) {
                  var fn_1 = rule.verify[i];
                  if (!fn_1(value)) {
                      isOk = false;
                      break;
                  }
              }
              if (!isOk) {
                  errorLog({
                      key: o,
                      code: 60002,
                      value: value
                  }, true);
              } else {
                  if (o === 'SDKFileDirectory' || o === 'visitorConfigURL') {
                      if (value && value[value.length - 1] !== '/') {
                          value += '/';
                      }
                  }
                  config[o] = value;
              }
          }
      });
      isInitConfig = true;
      coreInit();
      successLog({
          code: 20007
      });
      // 自动触发生命周期相关钩子
      autoTrigger();
      getServerTime(function () {
          implementAallbackArr();
      });
      implementAallbackArr();
      fn && fn(config);
  }

  /**
   * 小程序标准版sdk
   */
  webViewHybridInit();
  var ArkJsSdk = /** @class */function () {
      function ArkJsSdk() {
          this.isInit = false;
          this.config = optionsDefault();
          this.pageView = ready(pageView);
          this.registerSuperProperty = ready(registerSuperProperty, true);
          this.registerSuperProperties = ready(registerSuperProperties, true);
          this.getSuperProperty = ready(getSuperProperty$1);
          this.getSuperProperties = getSuperProperties;
          this.unRegisterSuperProperty = unRegisterSuperProperty;
          this.clearSuperProperties = clearSuperProperties;
          this.profileSetOnce = profileSetOnce;
          this.profileSet = profileSet;
          this.profileAppend = profileAppend;
          this.profileIncrement = profileIncrement;
          this.profileDelete = profileDelete;
          this.profileUnset = profileUnset;
          this.reset = reset;
          this.track = ready(track);
          this.alias = ready(alias);
          this.getPresetProperties = getPresetProperties;
          this.identify = identify;
          this.getDistinctId = getDistinctId;
          this.pageProperty = pageProperty$1;
      }
      // 初始化传入配置
      ArkJsSdk.prototype.init = function (config) {
          var _this = this;
          setConfig(config, function (o) {
              _this.config = o;
              if (_this.config.name) {
                  globalWindow[_this.config.name] = globalWindow.AnalysysAgent;
              }
              _this.isInit = true;
          });
      };
      return ArkJsSdk;
  }();
  alert('d');
  var ArkSdk = new ArkJsSdk();
  globalWindow.AnalysysAgent = ArkSdk;

  return ArkSdk;

});
